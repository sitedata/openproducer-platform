{"remainingRequest":"/home/circleci/project/node_modules/css-loader/dist/cjs.js??ref--6-2!/home/circleci/project/node_modules/postcss-loader/src/index.js??ref--6-3!/home/circleci/project/node_modules/sass-loader/dist/cjs.js??ref--6-4!/home/circleci/project/src/components/init-modal/style.scss","dependencies":[{"path":"/home/circleci/project/src/components/init-modal/style.scss","mtime":1624395607000},{"path":"/home/circleci/project/node_modules/@wordpress/base-styles/_colors.scss","mtime":499162500000},{"path":"/home/circleci/project/node_modules/@wordpress/base-styles/_colors.scss","mtime":499162500000},{"path":"/home/circleci/project/node_modules/@automattic/calypso-build/postcss.config.js","mtime":499162500000},{"path":"/home/circleci/project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/circleci/project/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/circleci/project/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/circleci/project/node_modules/sass-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}